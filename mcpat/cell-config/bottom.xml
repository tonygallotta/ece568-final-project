    <component id="system.L1Directory0" name="L1Directory0">
        <param name="Directory_type" value="0"/>
          <!--0 cam based shadowed tag. 1 directory cache -->
        <param name="Dir_config" value="2048,1,0,1, 4, 4,8"/>
        <!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
          <param name="buffer_sizes" value="8, 8, 8, 8"/>
        <!-- all the buffer related are optional -->
          <param name="clockrate" value="1200"/>
        <param name="ports" value="1,1,1"/>
        <!-- number of r, w, and rw search ports -->
        <param name="device_type" value="0"/>
        <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
        <!-- although there are multiple access types,
        Performance simulator needs to cast them into reads or writes
        e.g. the invalidates can be considered as writes -->
        <stat name="read_accesses" value="800000"/>
        <stat name="write_accesses" value="27276"/>
        <stat name="read_misses" value="1632"/>
        <stat name="write_misses" value="183"/>
        <stat name="conflicts" value="20"/>
        <stat name="duty_cycle" value="0.45"/>
    </component>
    <component id="system.L2Directory0" name="L2Directory0">
        <param name="Directory_type" value="1"/>
          <!--0 cam based shadowed tag. 1 directory cache -->
        <param name="Dir_config" value="1048576,16,16,1,2, 100"/>
        <!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
          <param name="buffer_sizes" value="8, 8, 8, 8"/>
        <!-- all the buffer related are optional -->
          <param name="clockrate" value="1200"/>
        <param name="ports" value="1,1,1"/>
        <!-- number of r, w, and rw search ports -->
        <param name="device_type" value="0"/>
        <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
        <!-- although there are multiple access types,
        Performance simulator needs to cast them into reads or writes
        e.g. the invalidates can be considered as writes -->
        <stat name="read_accesses" value="58824"/>
        <stat name="write_accesses" value="27276"/>
        <stat name="read_misses" value="1632"/>
        <stat name="write_misses" value="183"/>
        <stat name="conflicts" value="100"/>
          <stat name="duty_cycle" value="0.45"/>
    </component>
    <component id="system.L20" name="L20">
      <!-- all the buffer related are optional -->
        <param name="L2_config" value="786432,64,16,1, 4,23, 64, 1"/>
          <!-- consider 4-way bank interleaving for Niagara 1 -->
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->
        <param name="buffer_sizes" value="16, 16, 16, 16"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <param name="clockrate" value="1200"/>
        <param name="ports" value="1,1,1"/>
        <!-- number of r, w, and rw ports -->
        <param name="device_type" value="0"/>
        <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
        <stat name="read_accesses" value="100000"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="0"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
          <stat name="duty_cycle" value="0.2"/>
    </component>

<!--**********************************************************************-->
<component id="system.L30" name="L30">
        <param name="L3_config" value="1048576,64,16,1, 2,100, 64,1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->
        <param name="clockrate" value="3500"/>
        <param name="ports" value="1,1,1"/>
        <!-- number of r, w, and rw ports -->
        <param name="device_type" value="0"/>
        <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
        <param name="buffer_sizes" value="16, 16, 16, 16"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="58824"/>
        <stat name="write_accesses" value="27276"/>
        <stat name="read_misses" value="1632"/>
        <stat name="write_misses" value="183"/>
        <stat name="conflicts" value="0"/>
              <stat name="duty_cycle" value="0.35"/>
    </component>
<!--**********************************************************************-->
    <component id="system.NoC0" name="noc0">
      <param name="clockrate" value="1200"/>
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
      <param name="type" value="1"/>
      <!-- 1 NoC, O bus -->
      <param name="horizontal_nodes" value="2"/>
      <param name="vertical_nodes" value="1"/>
      <param name="has_global_link" value="0"/>
      <!-- 1 has global link, 0 does not have global link -->
      <param name="link_throughput" value="1"/><!--w.r.t clock -->
      <param name="link_latency" value="1"/><!--w.r.t clock -->
      <!-- throughput >= latency -->
      <!-- Router architecture -->
      <param name="input_ports" value="8"/>
      <param name="output_ports" value="5"/>
      <param name="virtual_channel_per_port" value="1"/>
      <!-- input buffer; in classic routers only input ports need buffers -->
      <param name="flit_bits" value="136"/>
      <param name="input_buffer_entries_per_vc" value="2"/><!--VCs within the same ports share input buffers whose size is proportional to the number of VCs-->
      <param name="chip_coverage" value="1"/>
      <!-- When multiple NOC present, one NOC will cover part of the whole chip. chip_coverage <=1 -->
      <stat name="total_accesses" value="360000"/>
      <!-- This is the number of total accesses within the whole network not for each router -->
      <stat name="duty_cycle" value="0.5"/>
    </component>

<!--**********************************************************************-->
    <component id="system.mc" name="mc">
      <!-- Memory controllers are for DDR(2,3...) DIMMs -->
      <!-- current version of McPAT uses published values for base parameters of memory controller
      improvements on MC will be added in later versions. -->
      <param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
      <param name="mc_clock" value="200"/><!--DIMM IO bus clock rate MHz DDR2-400 for Niagara 1-->
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
      <param name="peak_transfer_rate" value="3200"/><!--MB/S-->
      <param name="block_size" value="64"/><!--B-->
      <param name="number_mcs" value="4"/>
      <!-- current McPAT only supports homogeneous memory controllers -->
      <param name="memory_channels_per_mc" value="1"/>
      <param name="number_ranks" value="2"/>
      <param name="withPHY" value="0"/>
      <!-- # of ranks of each channel-->
      <param name="req_window_size_per_channel" value="32"/>
      <param name="IO_buffer_size_per_channel" value="32"/>
      <param name="databus_width" value="128"/>
      <param name="addressbus_width" value="51"/>
      <!-- McPAT will add the control bus width to the address bus width automatically -->
      <stat name="memory_accesses" value="33333"/>
      <stat name="memory_reads" value="16667"/>
      <stat name="memory_writes" value="16667"/>
      <!-- McPAT does not track individual mc, instead, it takes the total accesses and calculate
      the average power per MC or per channel. This is sufficient for most application.
      Further track down can be easily added in later versions. -->
    </component>
<!--**********************************************************************-->
    <component id="system.niu" name="niu">
      <!-- On chip 10Gb Ethernet NIC, including XAUI Phy and MAC controller  -->
      <!-- For a minimum IP packet size of 84B at 10Gb/s, a new packet arrives every 67.2ns.
         the low bound of clock rate of a 10Gb MAC is 150Mhz -->
      <param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
      <param name="clockrate" value="350"/>
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
      <param name="number_units" value="0"/> <!-- unlike PCIe and memory controllers, each Ethernet controller only have one port -->
      <stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/> <!-- ratio of total achieve-able load to total achieve-able bandwidth  -->
      <!-- McPAT does not track individual nic, instead, it takes the total accesses and calculate
      the average power per nic or per channel. This is sufficient for most application. -->
    </component>
<!--**********************************************************************-->
    <component id="system.pcie" name="pcie">
      <!-- On chip PCIe controller, including Phy-->
      <!-- For a minimum PCIe packet size of 84B at 8Gb/s per lane (PCIe 3.0), a new packet arrives every 84ns.
         the low bound of clock rate of a PCIe per lane logic is 120Mhz -->
      <param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
      <param name="withPHY" value="1"/>
      <param name="clockrate" value="350"/>
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
      <param name="number_units" value="0"/>
      <param name="num_channels" value="8"/> <!-- 2 ,4 ,8 ,16 ,32 -->
      <stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/> <!-- Percentage of total achived load to total achivable bandwidth  -->
      <!-- McPAT does not track individual pcie controllers, instead, it takes the total accesses and calculate
      the average power per pcie controller or per channel. This is sufficent for most application. -->
    </component>
<!--**********************************************************************-->
    <component id="system.flashc" name="flashc">
        <param name="number_flashcs" value="0"/>
      <param name="type" value="1"/> <!-- 1: low power; 0 high performance -->
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
            <param name="withPHY" value="1"/>
      <param name="peak_transfer_rate" value="200"/><!--Per controller sustainable reak rate MB/S -->
      <stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
      <stat name="total_load_perc" value="0.7"/> <!-- Percentage of total achived load to total achivable bandwidth  -->
      <!-- McPAT does not track individual flash controller, instead, it takes the total accesses and calculate
      the average power per fc or per channel. This is sufficent for most application -->
    </component>
<!--**********************************************************************-->

    </component>
</component>