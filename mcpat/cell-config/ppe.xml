    <component id="system.core0" name="core0">
      <!-- Core property -->
      <param name="clock_rate" value="{{frequency}}"/>
      <param name="vdd" value="0"/><!-- 0 means using ITRS default vdd -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="9"/>
      <!-- address width determines the tag_width in Cache, LSQ and buffers in cache controller
      default value is machine_bits, if not set -->
      <param name="machine_type" value="1"/><!-- 1 inorder; 0 OOO-->
      <!-- inorder/OoO -->
      <!-- [2] The processor provides two simultaneous threads of
      execution within the processor and can be viewed as a
      two-way multiprocessor with shared dataflow. -->
      <param name="number_hardware_threads" value="2"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
      it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
      branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <!-- [2] The IU fetches four instructions per cycle per thread
      into an instruction buffer and dispatches the instructions
      from this buffer. After decode and dependency checking,
      instructions are dual-issued to an execution unit -->
      <param name="fetch_width" value="4"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="4"/>
      <!-- decode_width determines the number of ports of the
      renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="2"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
      as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="2"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
      Theses parameters are reserved for future use.-->
      <!-- Could not find a published result for the number of pipelines, so we'll assume 2 -->
      <param name="pipelines_per_core" value="1,0"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <!-- [2] While the processor matches the 11 FO4 design
      frequency of the SPEs on a fully compliant Power
      processor, its pipeline depth is only 23 stages, significantly
      less than what one might expect for a design that
      reduces the amount of time per stage by nearly a factor
      of 2 compared with earlier designs -->
      <!-- [2] A double-precision floating-point instruction executes in ten cycles. -->
      <param name="pipeline_depth" value="23,23"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="16"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="16"/>
      <param name="instruction_window_scheme" value="0"/><!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="16"/>
      <param name="fp_instruction_window_size" value="16"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="0"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <!-- [2] "The XU consists of a 32- by 64-bit general-purpose
      register file per thread" -->
      <!-- Thus our model uses a total of 64 registers -->
      <param name="archi_Regs_IRF_size" value="32"/>
      <param name="archi_Regs_FRF_size" value="32"/>
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
      renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="32"/>
      <param name="phy_Regs_FRF_size" value="32"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
      RAM-based scheme will have free list, status table;
      CAM-based scheme have the valid bit in the data field of the CAM
      both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
      Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
      no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
      They will always try to execute out-of-order though. -->
      <!-- [2] t. The load/store unit consists of the L1
      D-cache, a translation cache, an eight-entry miss queue,
      and a 16-entry store queue. The load/store unit supports a
      non-blocking L1 D-cache which allows cache hits under
      misses. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="16"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="16"/>
      <!-- number of ports refer to sustainable concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
      as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="800000"/>
      <stat name="int_instructions" value="600000"/>
      <stat name="fp_instructions" value="20000"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="100000"/>
      <stat name="store_instructions" value="100000"/>
      <stat name="committed_instructions" value="800000"/>
      <stat name="committed_int_instructions" value="600000"/>
      <stat name="committed_fp_instructions" value="20000"/>
      <stat name="pipeline_duty_cycle" value="0.6"/><!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
        please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="{{total_cycles}}"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles"  value="{{total_cycles}}"/>
      <!-- RAT accesses -->
      <stat name="rename_accesses" value="263886"/>
      <stat name="fp_rename_accesses" value="263886"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="263886"/>
      <stat name="inst_window_writes" value="263886"/>
      <stat name="inst_window_wakeup_accesses" value="263886"/>
      <stat name="fp_inst_window_reads" value="263886"/>
      <stat name="fp_inst_window_writes" value="263886"/>
      <stat name="fp_inst_window_wakeup_accesses" value="263886"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="1600000"/>
      <stat name="float_regfile_reads" value="40000"/>
      <stat name="int_regfile_writes" value="800000"/>
      <stat name="float_regfile_writes" value="20000"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="5"/>
      <stat name="context_switches" value="260343"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
       multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="800000"/>
      <stat name="fpu_accesses" value="10000"/>
      <stat name="mul_accesses" value="100000"/>
      <stat name="cdb_alu_accesses" value="1000000"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
      otherwise, McPAT can use internal counter for different floating point instructions
      to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
      make sure all the numbers are final numbers,
      including the explicit read/write accesses,
      and the implicit accesses such as replacements and etc.
      Future versions of McPAT may be able to reason the implicit access
      based on param and stats of last level cache
      The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
        Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="0.9"/>
      <stat name="MUL_duty_cycle" value="0.5"/>
      <stat name="FPU_duty_cycle" value="0.4"/>
      <stat name="ALU_cdb_duty_cycle" value="0.9"/>
      <stat name="MUL_cdb_duty_cycle" value="0.5"/>
      <stat name="FPU_cdb_duty_cycle" value="0.4"/>
      <!-- [2] A 4-KB by 2-bit branch history table with 6 bits of global -->
      <component id="system.core0.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <!-- local predictor has 2 levels - specified as level1,level2 -->
        <param name="local_predictor_size" value="10,3"/>
        <param name="local_predictor_entries" value="4096"/>
        <param name="global_predictor_entries" value="4096"/>
        <param name="global_predictor_bits" value="6"/>
        <param name="chooser_predictor_entries" value="4096"/>
        <param name="chooser_predictor_bits" value="2"/>
        <!-- These parameters can be combined like below in next version
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
        -->
      </component>
      <component id="system.core0.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="100000"/>
        <stat name="total_misses" value="4"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
        which is actually a replacement -->
      </component>
      <!-- [2] The PPE supports a conventional cache hierarchy
      with 32-KB first-level instruction and data caches and
      a 512-KB second-level cache -->
      <component id="system.core0.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
        which is actually a replacement -->
        <param name="icache_config" value="32768,32,4,1,1,3,8,0"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="16, 16, 16,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="100000"/>
        <stat name="read_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.core0.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="100000"/>
        <stat name="total_misses" value="4"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.core0.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="32768,16,4,1,1,3,16,0"/>
        <param name="buffer_sizes" value="16, 16, 16, 16"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="100000"/>
        <stat name="write_accesses" value="27276"/>
        <stat name="read_misses" value="1632"/>
        <stat name="write_misses" value="183"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.core0.BTB" name="BTB">
              <!-- all the buffer related are optional -->
        <param name="BTB_config" value="8192,4,2,1, 1,3"/>
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
      </component>
  </component>
